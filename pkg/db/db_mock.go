// Code generated by MockGen. DO NOT EDIT.
// Source: db.go
//
// Generated by this command:
//
//	mockgen -write_package_comment=false -source=db.go -destination=db_mock.go -package db
//

package db

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo[DO any] struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder[DO]
	isgomock struct{}
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder[DO any] struct {
	mock *MockRepo[DO]
}

// NewMockRepo creates a new mock instance.
func NewMockRepo[DO any](ctrl *gomock.Controller) *MockRepo[DO] {
	mock := &MockRepo[DO]{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder[DO]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo[DO]) EXPECT() *MockRepoMockRecorder[DO] {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockRepo[DO]) BeginTx(ctx context.Context, opts *sql.TxOptions) (*sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, opts)
	ret0, _ := ret[0].(*sqlx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockRepoMockRecorder[DO]) BeginTx(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockRepo[DO])(nil).BeginTx), ctx, opts)
}

// Delete mocks base method.
func (m *MockRepo[DO]) Delete(ctx context.Context, d *DO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepoMockRecorder[DO]) Delete(ctx, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepo[DO])(nil).Delete), ctx, d)
}

// Insert mocks base method.
func (m *MockRepo[DO]) Insert(ctx context.Context, d *DO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockRepoMockRecorder[DO]) Insert(ctx, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRepo[DO])(nil).Insert), ctx, d)
}

// QueryByID mocks base method.
func (m *MockRepo[DO]) QueryByID(ctx context.Context, id int64) (*DO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryByID", ctx, id)
	ret0, _ := ret[0].(*DO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryByID indicates an expected call of QueryByID.
func (mr *MockRepoMockRecorder[DO]) QueryByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryByID", reflect.TypeOf((*MockRepo[DO])(nil).QueryByID), ctx, id)
}

// Update mocks base method.
func (m *MockRepo[DO]) Update(ctx context.Context, d *DO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepoMockRecorder[DO]) Update(ctx, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepo[DO])(nil).Update), ctx, d)
}
